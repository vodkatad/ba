include: "conf.sk"

rule all_counts:
	input: expand("{sample}.done", sample=SAMPLES)


rule cellrangercounts:
	params: transcriptome=TRANSCRIPTOME, fastq_dir=FASTQ_DIR+"{sample}", tool=CELLRANGER, mem=MEM, cores=CORES
	output: "{sample}.done"
	shell: 
		"""
		{params.tool} count --localmem={params.mem} --localcores={params.cores} --transcriptome={params.transcriptome} --fastqs={params.fastq_dir} --id={wildcards.sample}
		touch {output}
		"""

rule aggrcvs:
	input: expand("{sample}.done", sample=SAMPLES)
	output: "aggr.csv"
	shell:
		"""
		echo 'library_id,molecule_h5' > {output}
		ls Sample_*/outs/molecule_info.h5 | perl -ane '@a=split("/",$_); print $a[0].",".$_' >> {output}
		"""

# TODO if specific file exists in local get it otherwise link the generic one
rule seuratparams:
    output: "{sample}.params"
    input: SEURAT_PARAMS
    shell: 
        """
        ln -s {input} {output}
        """

rule seurat:
    input: placeh="{sample}.done", pars="{sample}.params", clfile="{sample}/outs/analysis/clustering/kmeans_"+str(NSAMPLES)+"_clusters/clusters.csv"
    params: dir="{sample}/outs/filtered_gene_bc_matrices_mex/GRCh38/", name="{sample}", osamples=OSAMPLES, outdir="{sample}_seurat"
    output: outdata="{sample}_seurat/prelim.Rdata"
    script: SRC_DIR+"seurat.R"

####
rule all_cris:
	input: expand("{sample}_prediction_result.xls", sample=SAMPLES)

rule cris:
	input: cris=CRIS, cellranger="{sample}"
	params: prefix="{sample}",debug=DEBUG
	output: "{sample}_prediction_result.xls"
	script: SRC_DIR+"cris_classify.R"

rule all_cris_understand:
	input: expand("{sample}_classes_heatmap.png", sample=SAMPLES)

#output: heatmap="{sample}_classes_heatmap.png", tsv="{sample}_classes_table", simple="{sample}_simple"
rule cris_understand:
	input: data="{sample}.debug.RData"
	output: heatmap="{sample}_classes_heatmap.png", tsv="{sample}_classes_table"
	script: SRC_DIR+"cris_understand.R"

# snakemake -j -p aggr.done --cluster-config ../../local/src/hactar.json --cluster "sbatch --mail-user={cluster.mail-user} --mail-type={cluster.mail-type} --partition={cluster.partition} --nodes={cluster.nodes} --job-name={cluster.job-name} --output={cluster.output} --error={cluster.error} --time=24:00:00 --mem=100 --ntasks=24"
# snakemake -j -p aggr.done --cluster-config ../../local/src/hactar.json --cluster "sbatch --mail-user={cluster.mail-user} --mail-type={cluster.mail-type} --partition={cluster.partition} --nodes={cluster.nodes} --job-name={cluster.job-name} --output={cluster.output} --error={cluster.error} --time=24:00:00 --mem=100 --ntasks=24"
#    mapped: (default) Subsample reads from higher-depth libraries until they all have an equal number of confidently mapped reads per cell.
#    raw: Subsample reads from higher-depth libraries until they all have an equal number of total (i.e. raw, mapping-independent) reads per cell.
#    none: Do not normalize at all.
rule cellrangeraggr:
	params: tool=CELLRANGER
	input: "aggr.csv"
	output: "aggr.done"
	shell: 
		"""
		{params.tool} aggr --id=aggr --csv={input} --normalize=mapped
        touch {output}
		"""

### for line we look for expression of line-1 # how is it possible to have calls for single lines1?
# first full length (For real expr we would need to have all counts for correction...)
rule countline:
	input: expand("{sample}/outs/possorted_genome_bam.bam", sample=SAMPLES)
	output: "line.counts"
 	params: cores=12, saf="/home/egrassi/line/local/share/data/line.saf"
	shell: 
		"""
		        featureCounts -a {params.saf} -F SAF -T {params.cores} -o {output} {input}
		"""


#### gsea ####
rule all_something:
	input: expand("{sample}.{{something}}", sample=SAMPLES)
	output: "all_samples_{something}"
	shell: "touch {output}"

rule gsea_input:
	input:  clusters="{sample}/outs/analysis/diffexp/graphclust/differential_expression.csv"
	params: debug=DEBUG
	output: "{sample}.gsea_in"
	script: GSEA_INPUT

rule gsea:
	input: tsv="{sample}.gsea_in", pathways=GSEA_PATHWAYS
	output: outdir=directory("gsea_{sample}"), outtable="{sample}.significant_NES_gsea"
	params: save="gsea_{sample}.Rdata", debug=DEBUG, cores=12
	script: GSEA

rule gsea_rnked_in_pathway:
	input: rdata="gsea_{sample}/gsea.Rdata"
	output: outdir="gsea_{sample}_xls_top20"
	script: GSEA_XLS

ruleorder: gsea_input_k > gsea_input
ruleorder: gsea_k > gsea
ruleorder: gsea_rnked_in_pathway_k > gsea_rnked_in_pathway
# gsea on kmeans clusters
rule gsea_input_k:
	input:  clusters="{sample}/outs/analysis/diffexp/kmeans_{k}_clusters/differential_expression.csv"
	params: debug=DEBUG
	output: "{sample}_{k,\d+}.gsea_in"
	script: GSEA_INPUT

rule gsea_k:
	input: tsv="{sample}_{k}.gsea_in", pathways=GSEA_PATHWAYS
	output: outdir=directory("gsea_{sample}_{k}"), outtable="{sample}_{k}.significant_NES_gsea"
	params: save="gsea_{sample}_{k}.Rdata", debug=DEBUG, cores=12
	script: GSEA

rule gsea_rnked_in_pathway_k:
	input: rdata="gsea_{sample}_{k}/gsea.Rdata"
	output: outdir="gsea_{sample}_{k}_xls_top20"
	script: GSEA_XLS

